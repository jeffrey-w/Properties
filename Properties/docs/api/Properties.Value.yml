### YamlMime:ManagedReference
items:
- uid: Properties.Value
  commentId: T:Properties.Value
  id: Value
  parent: Properties
  children:
  - Properties.Value.Boolean
  - Properties.Value.BooleanOrDefault(System.Boolean)
  - Properties.Value.Empty
  - Properties.Value.Equals(Properties.Value)
  - Properties.Value.Equals(System.Object)
  - Properties.Value.From(System.Collections.Generic.IEnumerable{System.String})
  - Properties.Value.From(System.String[])
  - Properties.Value.GetHashCode
  - Properties.Value.Integer
  - Properties.Value.IntegerOrDefault(System.Int32)
  - Properties.Value.IsEmpty
  - Properties.Value.Make(System.Object)
  - Properties.Value.Number
  - Properties.Value.NumberOrDefault(System.Double)
  - Properties.Value.String
  - Properties.Value.StringOrDefault(System.String)
  - Properties.Value.Strings
  - Properties.Value.StringsOrDefault(System.String[])
  - Properties.Value.op_Equality(Properties.Value,Properties.Value)
  - Properties.Value.op_Implicit(System.Boolean)~Properties.Value
  - Properties.Value.op_Implicit(System.Double)~Properties.Value
  - Properties.Value.op_Implicit(System.Int32)~Properties.Value
  - Properties.Value.op_Implicit(System.String)~Properties.Value
  - Properties.Value.op_Inequality(Properties.Value,Properties.Value)
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Value
  fullName: Properties.Value
  type: Struct
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Value
    path: ../src/Value.cs
    startLine: 9
  assemblies:
  - Properties
  namespace: Properties
  summary: The <code>Value</code> struct represents an immutable piece of data.
  example: []
  syntax:
    content: 'public readonly struct Value : IEquatable<Value>'
    content.vb: Public Structure Value Implements IEquatable(Of Value)
  implements:
  - System.IEquatable{Properties.Value}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Properties.Value.op_Implicit(System.Boolean)~Properties.Value
  commentId: M:Properties.Value.op_Implicit(System.Boolean)~Properties.Value
  id: op_Implicit(System.Boolean)~Properties.Value
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: implicit operator Value(bool)
  nameWithType: Value.implicit operator Value(bool)
  fullName: Properties.Value.implicit operator Properties.Value(bool)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Implicit
    path: ../src/Value.cs
    startLine: 17
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Creates a new Boolean <code>Value</code> with the specified

    <code class="paramref">payload</code>.
  example: []
  syntax:
    content: public static implicit operator Value(bool payload)
    parameters:
    - id: payload
      type: System.Boolean
      description: The Boolean held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Widening Operator CType(payload As Boolean) As Value
  overload: Properties.Value.op_Implicit*
  nameWithType.vb: Value.CType(Boolean)
  fullName.vb: Properties.Value.CType(Boolean)
  name.vb: CType(Boolean)
- uid: Properties.Value.op_Implicit(System.Int32)~Properties.Value
  commentId: M:Properties.Value.op_Implicit(System.Int32)~Properties.Value
  id: op_Implicit(System.Int32)~Properties.Value
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: implicit operator Value(int)
  nameWithType: Value.implicit operator Value(int)
  fullName: Properties.Value.implicit operator Properties.Value(int)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Implicit
    path: ../src/Value.cs
    startLine: 28
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Creates a new integer <code>Value</code> with the specified

    <code class="paramref">payload</code>.
  example: []
  syntax:
    content: public static implicit operator Value(int payload)
    parameters:
    - id: payload
      type: System.Int32
      description: The integer held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Widening Operator CType(payload As Integer) As Value
  overload: Properties.Value.op_Implicit*
  nameWithType.vb: Value.CType(Integer)
  fullName.vb: Properties.Value.CType(Integer)
  name.vb: CType(Integer)
- uid: Properties.Value.op_Implicit(System.Double)~Properties.Value
  commentId: M:Properties.Value.op_Implicit(System.Double)~Properties.Value
  id: op_Implicit(System.Double)~Properties.Value
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: implicit operator Value(double)
  nameWithType: Value.implicit operator Value(double)
  fullName: Properties.Value.implicit operator Properties.Value(double)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Implicit
    path: ../src/Value.cs
    startLine: 38
  assemblies:
  - Properties
  namespace: Properties
  summary: Creates a new real <code>Value</code> with the specified <code class="paramref">payload</code>.
  example: []
  syntax:
    content: public static implicit operator Value(double payload)
    parameters:
    - id: payload
      type: System.Double
      description: The real number held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Widening Operator CType(payload As Double) As Value
  overload: Properties.Value.op_Implicit*
  nameWithType.vb: Value.CType(Double)
  fullName.vb: Properties.Value.CType(Double)
  name.vb: CType(Double)
- uid: Properties.Value.op_Implicit(System.String)~Properties.Value
  commentId: M:Properties.Value.op_Implicit(System.String)~Properties.Value
  id: op_Implicit(System.String)~Properties.Value
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: implicit operator Value(string)
  nameWithType: Value.implicit operator Value(string)
  fullName: Properties.Value.implicit operator Properties.Value(string)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Implicit
    path: ../src/Value.cs
    startLine: 49
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Creates a new string <code>Value</code> with the specified

    <code class="paramref">payload</code>.
  example: []
  syntax:
    content: public static implicit operator Value(string payload)
    parameters:
    - id: payload
      type: System.String
      description: The string held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Widening Operator CType(payload As String) As Value
  overload: Properties.Value.op_Implicit*
  nameWithType.vb: Value.CType(String)
  fullName.vb: Properties.Value.CType(String)
  name.vb: CType(String)
- uid: Properties.Value.op_Equality(Properties.Value,Properties.Value)
  commentId: M:Properties.Value.op_Equality(Properties.Value,Properties.Value)
  id: op_Equality(Properties.Value,Properties.Value)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: operator ==(Value, Value)
  nameWithType: Value.operator ==(Value, Value)
  fullName: Properties.Value.operator ==(Properties.Value, Properties.Value)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Equality
    path: ../src/Value.cs
    startLine: 64
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Determines whether the <code class="paramref">first</code> and <code class="paramref">second</code>

    <code>Value</code>s hold the same data.
  example: []
  syntax:
    content: public static bool operator ==(Value first, Value second)
    parameters:
    - id: first
      type: Properties.Value
      description: One of the <code>Value</code>s to compare.
    - id: second
      type: Properties.Value
      description: The other <code>Value</code> to compare.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the <code class="paramref">first</code> <code>Value</code> is equal to the

        <code class="paramref">second</code>.
    content.vb: Public Shared Operator =(first As Value, second As Value) As Boolean
  overload: Properties.Value.op_Equality*
  nameWithType.vb: Value.=(Value, Value)
  fullName.vb: Properties.Value.=(Properties.Value, Properties.Value)
  name.vb: =(Value, Value)
- uid: Properties.Value.op_Inequality(Properties.Value,Properties.Value)
  commentId: M:Properties.Value.op_Inequality(Properties.Value,Properties.Value)
  id: op_Inequality(Properties.Value,Properties.Value)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: operator !=(Value, Value)
  nameWithType: Value.operator !=(Value, Value)
  fullName: Properties.Value.operator !=(Properties.Value, Properties.Value)
  type: Operator
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: op_Inequality
    path: ../src/Value.cs
    startLine: 79
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Determines whether the <code class="paramref">first</code> and <code class="paramref">second</code>

    <code>Value</code>s hold different data.
  example: []
  syntax:
    content: public static bool operator !=(Value first, Value second)
    parameters:
    - id: first
      type: Properties.Value
      description: One of the <code>Value</code>s to compare.
    - id: second
      type: Properties.Value
      description: The other <code>Value</code> to compare.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the <code class="paramref">first</code> <code>Value</code> is not equal to the

        <code class="paramref">second</code>.
    content.vb: Public Shared Operator <>(first As Value, second As Value) As Boolean
  overload: Properties.Value.op_Inequality*
  nameWithType.vb: Value.<>(Value, Value)
  fullName.vb: Properties.Value.<>(Properties.Value, Properties.Value)
  name.vb: <>(Value, Value)
- uid: Properties.Value.Empty
  commentId: F:Properties.Value.Empty
  id: Empty
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Value.Empty
  fullName: Properties.Value.Empty
  type: Field
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Empty
    path: ../src/Value.cs
    startLine: 85
  assemblies:
  - Properties
  namespace: Properties
  summary: The <code>Value</code> that does not hold any data.
  example: []
  syntax:
    content: public static readonly Value Empty
    return:
      type: Properties.Value
    content.vb: Public Shared ReadOnly Empty As Value
- uid: Properties.Value.Make(System.Object)
  commentId: M:Properties.Value.Make(System.Object)
  id: Make(System.Object)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Make(object?)
  nameWithType: Value.Make(object?)
  fullName: Properties.Value.Make(object?)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Make
    path: ../src/Value.cs
    startLine: 98
  assemblies:
  - Properties
  namespace: Properties
  summary: Creates a new <code>Value</code> with the specified <code class="paramref">payload</code>.
  example: []
  syntax:
    content: public static Value Make(object? payload)
    parameters:
    - id: payload
      type: System.Object
      description: The data held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Function Make(payload As Object) As Value
  overload: Properties.Value.Make*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      If the specified <code class="paramref">payload</code> does not belong to

      <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>, <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double" data-throw-if-not-resolved="false"></xref>,

      <xref href="System.String" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> over

      <xref href="System.String" data-throw-if-not-resolved="false"></xref>s.
  nameWithType.vb: Value.Make(Object)
  fullName.vb: Properties.Value.Make(Object)
  name.vb: Make(Object)
- uid: Properties.Value.From(System.String[])
  commentId: M:Properties.Value.From(System.String[])
  id: From(System.String[])
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: From(params string[])
  nameWithType: Value.From(params string[])
  fullName: Properties.Value.From(params string[])
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: From
    path: ../src/Value.cs
    startLine: 119
  assemblies:
  - Properties
  namespace: Properties
  summary: Creates a new <code>Value</code> with the specified <code class="paramref">strings</code>.
  example: []
  syntax:
    content: public static Value From(params string[] strings)
    parameters:
    - id: strings
      type: System.String[]
      description: The data held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value.</code>
    content.vb: Public Shared Function From(ParamArray strings As String()) As Value
  overload: Properties.Value.From*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If any of the specified <code class="paramref">strings</code> are <code>null</code>.
  nameWithType.vb: Value.From(ParamArray String())
  fullName.vb: Properties.Value.From(ParamArray String())
  name.vb: From(ParamArray String())
- uid: Properties.Value.From(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Properties.Value.From(System.Collections.Generic.IEnumerable{System.String})
  id: From(System.Collections.Generic.IEnumerable{System.String})
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: From(IEnumerable<string>)
  nameWithType: Value.From(IEnumerable<string>)
  fullName: Properties.Value.From(System.Collections.Generic.IEnumerable<string>)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: From
    path: ../src/Value.cs
    startLine: 137
  assemblies:
  - Properties
  namespace: Properties
  summary: Creates a new <code>Value</code> with the specified <code class="paramref">strings</code>.
  example: []
  syntax:
    content: public static Value From(IEnumerable<string> strings)
    parameters:
    - id: strings
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The data held by the new <code>Value</code>.
    return:
      type: Properties.Value
      description: A new <code>Value</code>.
    content.vb: Public Shared Function From(strings As IEnumerable(Of String)) As Value
  overload: Properties.Value.From*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If any of the specified <code class="paramref">strings</code> are <code>null</code>.
  nameWithType.vb: Value.From(IEnumerable(Of String))
  fullName.vb: Properties.Value.From(System.Collections.Generic.IEnumerable(Of String))
  name.vb: From(IEnumerable(Of String))
- uid: Properties.Value.IsEmpty
  commentId: P:Properties.Value.IsEmpty
  id: IsEmpty
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Value.IsEmpty
  fullName: Properties.Value.IsEmpty
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: IsEmpty
    path: ../src/Value.cs
    startLine: 173
  assemblies:
  - Properties
  namespace: Properties
  summary: Indicates whether this <code>Value</code> holds no data;
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Properties.Value.IsEmpty*
- uid: Properties.Value.Boolean
  commentId: P:Properties.Value.Boolean
  id: Boolean
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Boolean
  nameWithType: Value.Boolean
  fullName: Properties.Value.Boolean
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Boolean
    path: ../src/Value.cs
    startLine: 180
  assemblies:
  - Properties
  namespace: Properties
  summary: The <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>.
  example: []
  syntax:
    content: public bool Boolean { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property [Boolean] As Boolean
  overload: Properties.Value.Boolean*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>, or holds

      not data.
- uid: Properties.Value.Integer
  commentId: P:Properties.Value.Integer
  id: Integer
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Integer
  nameWithType: Value.Integer
  fullName: Properties.Value.Integer
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Integer
    path: ../src/Value.cs
    startLine: 187
  assemblies:
  - Properties
  namespace: Properties
  summary: The <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>.
  example: []
  syntax:
    content: public int Integer { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property [Integer] As Integer
  overload: Properties.Value.Integer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as a <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>, or holds

      not data.
- uid: Properties.Value.Number
  commentId: P:Properties.Value.Number
  id: Number
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Number
  nameWithType: Value.Number
  fullName: Properties.Value.Number
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Number
    path: ../src/Value.cs
    startLine: 194
  assemblies:
  - Properties
  namespace: Properties
  summary: The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>.
  example: []
  syntax:
    content: public double Number { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Number As Double
  overload: Properties.Value.Number*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>, or holds

      no data,
- uid: Properties.Value.String
  commentId: P:Properties.Value.String
  id: String
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: String
  nameWithType: Value.String
  fullName: Properties.Value.String
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: String
    path: ../src/Value.cs
    startLine: 201
  assemblies:
  - Properties
  namespace: Properties
  summary: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>.
  example: []
  syntax:
    content: public string String { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property [String] As String
  overload: Properties.Value.String*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as a <xref href="System.String" data-throw-if-not-resolved="false"></xref>, or holds

      no data.
- uid: Properties.Value.Strings
  commentId: P:Properties.Value.Strings
  id: Strings
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Strings
  nameWithType: Value.Strings
  fullName: Properties.Value.Strings
  type: Property
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Strings
    path: ../src/Value.cs
    startLine: 211
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="System.String" data-throw-if-not-resolved="false"></xref>s held by this

    <code>Value</code>.
  example: []
  syntax:
    content: public IEnumerable<string> Strings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Strings As IEnumerable(Of String)
  overload: Properties.Value.Strings*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as an

      <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>, or holds no data.
- uid: Properties.Value.BooleanOrDefault(System.Boolean)
  commentId: M:Properties.Value.BooleanOrDefault(System.Boolean)
  id: BooleanOrDefault(System.Boolean)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: BooleanOrDefault(bool)
  nameWithType: Value.BooleanOrDefault(bool)
  fullName: Properties.Value.BooleanOrDefault(bool)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: BooleanOrDefault
    path: ../src/Value.cs
    startLine: 235
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Provides the <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code> or the specified

    <code class="paramref">defaultValue</code> if it does not hold any data.
  example: []
  syntax:
    content: public bool BooleanOrDefault(bool defaultValue = false)
    parameters:
    - id: defaultValue
      type: System.Boolean
      description: >-
        The data to return when this <code>Value</code> does not

        hold any.
    return:
      type: System.Boolean
      description: >-
        The <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>, or the specified

        <code class="paramref">defaultValue</code>.
    content.vb: Public Function BooleanOrDefault(defaultValue As Boolean = False) As Boolean
  overload: Properties.Value.BooleanOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this <code>Value</code> cannot be interpreted as a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Value.BooleanOrDefault(Boolean)
  fullName.vb: Properties.Value.BooleanOrDefault(Boolean)
  name.vb: BooleanOrDefault(Boolean)
- uid: Properties.Value.IntegerOrDefault(System.Int32)
  commentId: M:Properties.Value.IntegerOrDefault(System.Int32)
  id: IntegerOrDefault(System.Int32)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: IntegerOrDefault(int)
  nameWithType: Value.IntegerOrDefault(int)
  fullName: Properties.Value.IntegerOrDefault(int)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: IntegerOrDefault
    path: ../src/Value.cs
    startLine: 254
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Provides the <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code> or the specified

    <code class="paramref">defaultValue</code> if it does not hold any data.
  example: []
  syntax:
    content: public int IntegerOrDefault(int defaultValue = 0)
    parameters:
    - id: defaultValue
      type: System.Int32
      description: The data to return when this <code>Value</code> does not hold any.
    return:
      type: System.Int32
      description: >-
        The <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>, or the specified

        <code class="paramref">defaultValue</code>.
    content.vb: Public Function IntegerOrDefault(defaultValue As Integer = 0) As Integer
  overload: Properties.Value.IntegerOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this <code>Value</code> cannot be interpreted as a <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Value.IntegerOrDefault(Integer)
  fullName.vb: Properties.Value.IntegerOrDefault(Integer)
  name.vb: IntegerOrDefault(Integer)
- uid: Properties.Value.NumberOrDefault(System.Double)
  commentId: M:Properties.Value.NumberOrDefault(System.Double)
  id: NumberOrDefault(System.Double)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: NumberOrDefault(double)
  nameWithType: Value.NumberOrDefault(double)
  fullName: Properties.Value.NumberOrDefault(double)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: NumberOrDefault
    path: ../src/Value.cs
    startLine: 273
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Provides the <xref href="System.Double" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code> or the specified

    <code class="paramref">defaultValue</code> if it does not hold any data.
  example: []
  syntax:
    content: public double NumberOrDefault(double defaultValue = 0)
    parameters:
    - id: defaultValue
      type: System.Double
      description: The data to return when this <code>Value</code> does not hold any.
    return:
      type: System.Double
      description: >-
        The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>, or the specified

        <code class="paramref">defaultValue</code>.
    content.vb: Public Function NumberOrDefault(defaultValue As Double = 0) As Double
  overload: Properties.Value.NumberOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this <code>Value</code> cannot be interpreted as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Value.NumberOrDefault(Double)
  fullName.vb: Properties.Value.NumberOrDefault(Double)
  name.vb: NumberOrDefault(Double)
- uid: Properties.Value.StringOrDefault(System.String)
  commentId: M:Properties.Value.StringOrDefault(System.String)
  id: StringOrDefault(System.String)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: StringOrDefault(string)
  nameWithType: Value.StringOrDefault(string)
  fullName: Properties.Value.StringOrDefault(string)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: StringOrDefault
    path: ../src/Value.cs
    startLine: 292
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Provides the <xref href="System.String" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code> or the specified

    <code class="paramref">defaultValue</code> if it does not hold any data.
  example: []
  syntax:
    content: public string StringOrDefault(string defaultValue = "")
    parameters:
    - id: defaultValue
      type: System.String
      description: The data to return when this <code>Value</code> does not hold any.
    return:
      type: System.String
      description: >-
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> held by this <code>Value</code>, or the specified

        <code class="paramref">defaultValue</code>.
    content.vb: Public Function StringOrDefault(defaultValue As String = "") As String
  overload: Properties.Value.StringOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this <code>Value</code> cannot be interpreted as a <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Value.StringOrDefault(String)
  fullName.vb: Properties.Value.StringOrDefault(String)
  name.vb: StringOrDefault(String)
- uid: Properties.Value.StringsOrDefault(System.String[])
  commentId: M:Properties.Value.StringsOrDefault(System.String[])
  id: StringsOrDefault(System.String[])
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: StringsOrDefault(params string[])
  nameWithType: Value.StringsOrDefault(params string[])
  fullName: Properties.Value.StringsOrDefault(params string[])
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: StringsOrDefault
    path: ../src/Value.cs
    startLine: 314
  assemblies:
  - Properties
  namespace: Properties
  summary: >-
    Provides the <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="System.String" data-throw-if-not-resolved="false"></xref>s held by

    this <code>Value</code> or the specified <code class="paramref">defaultValue</code> if it does

    not hold any data.
  example: []
  syntax:
    content: public IEnumerable<string> StringsOrDefault(params string[] defaultValue)
    parameters:
    - id: defaultValue
      type: System.String[]
      description: >-
        The data to return when this <code>Value</code> does not

        hold any.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="System.String" data-throw-if-not-resolved="false"></xref>s held by this

        <code>Value</code>, or the specified <code class="paramref">defaultValue</code>.
    content.vb: Public Function StringsOrDefault(ParamArray defaultValue As String()) As IEnumerable(Of String)
  overload: Properties.Value.StringsOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      If this <code>Value</code> cannot be interpreted as an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>

      of <xref href="System.String" data-throw-if-not-resolved="false"></xref>s.
  nameWithType.vb: Value.StringsOrDefault(ParamArray String())
  fullName.vb: Properties.Value.StringsOrDefault(ParamArray String())
  name.vb: StringsOrDefault(ParamArray String())
- uid: Properties.Value.Equals(System.Object)
  commentId: M:Properties.Value.Equals(System.Object)
  id: Equals(System.Object)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: Value.Equals(object?)
  fullName: Properties.Value.Equals(object?)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Equals
    path: ../src/Value.cs
    startLine: 320
  assemblies:
  - Properties
  namespace: Properties
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Properties.Value.Equals*
  nameWithType.vb: Value.Equals(Object)
  fullName.vb: Properties.Value.Equals(Object)
  name.vb: Equals(Object)
- uid: Properties.Value.Equals(Properties.Value)
  commentId: M:Properties.Value.Equals(Properties.Value)
  id: Equals(Properties.Value)
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: Equals(Value)
  nameWithType: Value.Equals(Value)
  fullName: Properties.Value.Equals(Properties.Value)
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: Equals
    path: ../src/Value.cs
    startLine: 330
  assemblies:
  - Properties
  namespace: Properties
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(Value value)
    parameters:
    - id: value
      type: Properties.Value
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(value As Value) As Boolean
  overload: Properties.Value.Equals*
  implements:
  - System.IEquatable{Properties.Value}.Equals(Properties.Value)
- uid: Properties.Value.GetHashCode
  commentId: M:Properties.Value.GetHashCode
  id: GetHashCode
  parent: Properties.Value
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Value.GetHashCode()
  fullName: Properties.Value.GetHashCode()
  type: Method
  source:
    remote:
      path: Properties/src/Value.cs
      branch: main
      repo: git@github.com:jeffrey-w/Properties.git
    id: GetHashCode
    path: ../src/Value.cs
    startLine: 348
  assemblies:
  - Properties
  namespace: Properties
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Properties.Value.GetHashCode*
references:
- uid: Properties
  commentId: N:Properties
  href: Properties.html
  name: Properties
  nameWithType: Properties
  fullName: Properties
- uid: System.IEquatable{Properties.Value}
  commentId: T:System.IEquatable{Properties.Value}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Value>
  nameWithType: IEquatable<Value>
  fullName: System.IEquatable<Properties.Value>
  nameWithType.vb: IEquatable(Of Value)
  fullName.vb: System.IEquatable(Of Properties.Value)
  name.vb: IEquatable(Of Value)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Properties.Value
    name: Value
    href: Properties.Value.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Properties.Value
    name: Value
    href: Properties.Value.html
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Properties.Value.op_Implicit*
  commentId: Overload:Properties.Value.op_Implicit
  name: implicit operator
  nameWithType: Value.implicit operator
  fullName: Properties.Value.implicit operator
  nameWithType.vb: Value.CType
  fullName.vb: Properties.Value.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Properties.Value
  commentId: T:Properties.Value
  parent: Properties
  href: Properties.Value.html
  name: Value
  nameWithType: Value
  fullName: Properties.Value
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Properties.Value.op_Equality*
  commentId: Overload:Properties.Value.op_Equality
  href: Properties.Value.html#Properties_Value_op_Equality_Properties_Value_Properties_Value_
  name: operator ==
  nameWithType: Value.operator ==
  fullName: Properties.Value.operator ==
  nameWithType.vb: Value.=
  fullName.vb: Properties.Value.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Properties.Value.op_Equality*
    name: ==
    href: Properties.Value.html#Properties_Value_op_Equality_Properties_Value_Properties_Value_
- uid: Properties.Value.op_Inequality*
  commentId: Overload:Properties.Value.op_Inequality
  href: Properties.Value.html#Properties_Value_op_Inequality_Properties_Value_Properties_Value_
  name: operator !=
  nameWithType: Value.operator !=
  fullName: Properties.Value.operator !=
  nameWithType.vb: Value.<>
  fullName.vb: Properties.Value.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Properties.Value.op_Inequality*
    name: '!='
    href: Properties.Value.html#Properties_Value_op_Inequality_Properties_Value_Properties_Value_
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Properties.Value.Make*
  commentId: Overload:Properties.Value.Make
  href: Properties.Value.html#Properties_Value_Make_System_Object_
  name: Make
  nameWithType: Value.Make
  fullName: Properties.Value.Make
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Properties.Value.From*
  commentId: Overload:Properties.Value.From
  href: Properties.Value.html#Properties_Value_From_System_String___
  name: From
  nameWithType: Value.From
  fullName: Properties.Value.From
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Properties.Value.IsEmpty*
  commentId: Overload:Properties.Value.IsEmpty
  href: Properties.Value.html#Properties_Value_IsEmpty
  name: IsEmpty
  nameWithType: Value.IsEmpty
  fullName: Properties.Value.IsEmpty
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: Properties.Value.Boolean*
  commentId: Overload:Properties.Value.Boolean
  href: Properties.Value.html#Properties_Value_Boolean
  name: Boolean
  nameWithType: Value.Boolean
  fullName: Properties.Value.Boolean
- uid: Properties.Value.Integer*
  commentId: Overload:Properties.Value.Integer
  href: Properties.Value.html#Properties_Value_Integer
  name: Integer
  nameWithType: Value.Integer
  fullName: Properties.Value.Integer
- uid: Properties.Value.Number*
  commentId: Overload:Properties.Value.Number
  href: Properties.Value.html#Properties_Value_Number
  name: Number
  nameWithType: Value.Number
  fullName: Properties.Value.Number
- uid: Properties.Value.String*
  commentId: Overload:Properties.Value.String
  href: Properties.Value.html#Properties_Value_String
  name: String
  nameWithType: Value.String
  fullName: Properties.Value.String
- uid: Properties.Value.Strings*
  commentId: Overload:Properties.Value.Strings
  href: Properties.Value.html#Properties_Value_Strings
  name: Strings
  nameWithType: Value.Strings
  fullName: Properties.Value.Strings
- uid: Properties.Value.BooleanOrDefault*
  commentId: Overload:Properties.Value.BooleanOrDefault
  href: Properties.Value.html#Properties_Value_BooleanOrDefault_System_Boolean_
  name: BooleanOrDefault
  nameWithType: Value.BooleanOrDefault
  fullName: Properties.Value.BooleanOrDefault
- uid: Properties.Value.IntegerOrDefault*
  commentId: Overload:Properties.Value.IntegerOrDefault
  href: Properties.Value.html#Properties_Value_IntegerOrDefault_System_Int32_
  name: IntegerOrDefault
  nameWithType: Value.IntegerOrDefault
  fullName: Properties.Value.IntegerOrDefault
- uid: Properties.Value.NumberOrDefault*
  commentId: Overload:Properties.Value.NumberOrDefault
  href: Properties.Value.html#Properties_Value_NumberOrDefault_System_Double_
  name: NumberOrDefault
  nameWithType: Value.NumberOrDefault
  fullName: Properties.Value.NumberOrDefault
- uid: Properties.Value.StringOrDefault*
  commentId: Overload:Properties.Value.StringOrDefault
  href: Properties.Value.html#Properties_Value_StringOrDefault_System_String_
  name: StringOrDefault
  nameWithType: Value.StringOrDefault
  fullName: Properties.Value.StringOrDefault
- uid: Properties.Value.StringsOrDefault*
  commentId: Overload:Properties.Value.StringsOrDefault
  href: Properties.Value.html#Properties_Value_StringsOrDefault_System_String___
  name: StringsOrDefault
  nameWithType: Value.StringsOrDefault
  fullName: Properties.Value.StringsOrDefault
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Properties.Value.Equals*
  commentId: Overload:Properties.Value.Equals
  href: Properties.Value.html#Properties_Value_Equals_System_Object_
  name: Equals
  nameWithType: Value.Equals
  fullName: Properties.Value.Equals
- uid: System.IEquatable{Properties.Value}.Equals(Properties.Value)
  commentId: M:System.IEquatable{Properties.Value}.Equals(Properties.Value)
  parent: System.IEquatable{Properties.Value}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Value)
  nameWithType: IEquatable<Value>.Equals(Value)
  fullName: System.IEquatable<Properties.Value>.Equals(Properties.Value)
  nameWithType.vb: IEquatable(Of Value).Equals(Value)
  fullName.vb: System.IEquatable(Of Properties.Value).Equals(Properties.Value)
  spec.csharp:
  - uid: System.IEquatable{Properties.Value}.Equals(Properties.Value)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Properties.Value
    name: Value
    href: Properties.Value.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Properties.Value}.Equals(Properties.Value)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Properties.Value
    name: Value
    href: Properties.Value.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Properties.Value.GetHashCode*
  commentId: Overload:Properties.Value.GetHashCode
  href: Properties.Value.html#Properties_Value_GetHashCode
  name: GetHashCode
  nameWithType: Value.GetHashCode
  fullName: Properties.Value.GetHashCode
